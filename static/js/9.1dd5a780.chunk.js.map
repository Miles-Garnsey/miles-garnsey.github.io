{"version":3,"sources":["routes/posts/2023-02-23-Making Go functions generic II/document.mdx","routes/posts/2023-02-23-Making Go functions generic II/gears.PNG","routes/posts/2023-02-23-Making Go functions generic II/document.module.css"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_user_Documents_projects_blog_client_react_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","parentName","className","styles","style","marginLeft","src","gears","alt","id","frameBorder","class","padding","position","top","maxWidth","href","width","height","allowFullScreen","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter","module","exports","__webpack_require__","p","image","figure","sidebarcontainer","floatright","sidebar","rainbow","rainbow-bg"],"mappings":"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","file":"static/js/9.1dd5a780.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"8 min read\",\"minutes\":7.4,\"time\":444000,\"words\":1480}\n/* @jsx mdx */\nimport gears from \"./gears.PNG\"\nimport styles from './document.module.css'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`In our last installment we discussed why Go interfaces are different to Java interfaces and the ways in which they completely fail to help us make our functions more generic. `}</p>\n    <p>{`We also threw shade at all my possible future employers, alienated many future workmates, and wrote a number of career-limiting statements. I remind my readers that this blog represents my opinions and not those of my employer.`}</p>\n    <p>{`The gist boiled down to the fact that an interface A which declares methods returning interface types B is not fulfilled by a type carrying correctly named methods with return types C which indeed fulfil the interface(s) B.`}</p>\n    <p>{`In other words, a `}<inlineCode parentName=\"p\">{`corev1.ConfigMap`}</inlineCode>{` isnâ€™t a `}<inlineCode parentName=\"p\">{`client.Object`}</inlineCode>{` when it is used as a return type and the below interface definition is next to useless because nothing fulfils it:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type Reconcilable interface {\n    client.Object\n    DeepCopy() client.Object\n    DeepCopyInto(client.Object)\n}\n`}</code></pre>\n    <div className={styles[\"sidebarcontainer\"]} style={{\n      marginLeft: \"0\"\n    }}>\n      <span>\n        <figure className={styles[\"figure\"]}>\n  <img src={gears} className={styles[\"image\"]} alt=\"A big set of neon gears and machinery.\" />\n  <figcaption>Another, more sinister Kubernete.</figcaption>\n        </figure>\n      </span>\n      <span className={styles[\"sidebar\"]}>\n        <h2 {...{\n          \"id\": \"how-would-it-work-in-java\"\n        }}>{`How would it work in Java?`}</h2>\n        <p>{`In Java, we could justifiably write something like this and expect it to compile. `}</p>\n        <p>{`No need for generics or anything fancy. But as weâ€™ve discussed above, Go doesnâ€™t work the same way as Java when it comes to interface return types.`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`public interface IClientDotObject{}\n\npublic interface IReconciler extends IClientDotObject {\n    IClientDotObject DeepCopy();\n    void DeepCopyInto(IClientDotObject in);\n}\n\npublic class ConcreteCaller {\n    IReconciler desiredObject;\n    public void Reconcile() {\n        this.desiredObject.DeepCopy();\n        // etc.\n        ...\n    }\n}\n`}</code></pre>\n        <p>{`What we are going to end up with is something that works the same way, but in Go we have additional hoops to jump through.`}</p>\n      </span>\n    </div>\n    <h1 {...{\n      \"id\": \"another-attempt-to-solve-this-shitshow\"\n    }}>{`Another attempt to solve this shitshow`}</h1>\n    <p>{`At this point (particularly if you are subject to an impending deadline), you ought to be feeling somewhat uncomfortable, perhaps your skin is crawling, and you may be feeling clammy. I often enjoy a whiskey at this point in the problem solving process, but you pick your poison.`}</p>\n    <div className={styles[\"sidebarcontainer\"]}>\n      <span>\n        <h2 {...{\n          \"id\": \"other-than-alcohol-abuse---what-are-our-options\"\n        }}>{`Other than alcohol abuse - what are our options?`}</h2>\n        <p>{`We know that we need to declare an interface which uses only concrete return types, and thereâ€™s a way we can do it using the new generics feature in Go 1.19.`}</p>\n        <p>{`If we examine the structure of our interface, we can see that it is as follows:`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`type Reconcilable interface {\n    client.Object\n    DeepCopy() A POINTER TYPE\n    DeepCopyInto(A POINTER TYPE)\n}\n`}</code></pre>\n      </span>\n      <span>\n        <iframe src=\"https://giphy.com/embed/ggHmCDJXx4om4hNWbM\" frameBorder=\"0\" class=\"giphy-embed\" style={{\n          padding: \".5rem\",\n          position: \"sticky\",\n          top: \"50%\",\n          maxWidth: \"100%\"\n        }}>\n        </iframe>\n      </span>\n    </div>\n    <h2 {...{\n      \"id\": \"embedded-interfaces\"\n    }}>{`Embedded interfaces`}</h2>\n    <p><inlineCode parentName=\"p\">{`client.Object`}</inlineCode>{` is an embedded interface in this instance, it simply means that a type fulfilling `}<inlineCode parentName=\"p\">{`Reconcilable`}</inlineCode>{` fulfills everything client.Object does too. `}</p>\n    <h2 {...{\n      \"id\": \"type-parameters\"\n    }}>{`Type parameters`}</h2>\n    <p>{`We can also make this interface generic over some concrete types. Using the new type parameter syntax we can write this as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type Reconcilable[T any] interface {\n    client.Object\n    DeepCopy() T\n    DeepCopyInto(T)\n`}</code></pre>\n    <p>{`Great, now (provided we make `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` concrete when calling functions taking `}<inlineCode parentName=\"p\">{`Reconcileable`}</inlineCode>{` arguments) we are returning only concrete types from our methods, while still asserting that Reconcilable fulfils `}<inlineCode parentName=\"p\">{`client.Object`}</inlineCode>{`. We just need to update our function signature:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject(ctx context.Context, kClient client.Client, desiredObject Reconcilable) error {}\n`}</code></pre>\n    <p>{`Becomes:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject[U Reconcilable[U]](ctx context.Context, kClient client.Client, desiredObject U) error {}\n`}</code></pre>\n    <p>{`See this `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Miles-Garnsey/go-generics-blog/commit/09a5318847cc54822c147a70e29c68ef5689d020\"\n      }}>{`commit`}</a>{`.`}</p>\n    <p>{`Which just means that the type parameter `}<inlineCode parentName=\"p\">{`U`}</inlineCode>{` will take on whatever type is passed as the `}<inlineCode parentName=\"p\">{`desiredObject`}</inlineCode>{` argument, so if we pass a `}<inlineCode parentName=\"p\">{`corev1.ConfigMap`}</inlineCode>{` weâ€™ll have set `}<inlineCode parentName=\"p\">{`U`}</inlineCode>{` to the type `}<inlineCode parentName=\"p\">{`ConfigMap`}</inlineCode>{` and asserted that it must implement the two functions and one embdedded interface weâ€™ve declared as part of `}<inlineCode parentName=\"p\">{`Reconcilable`}</inlineCode>{`.`}</p>\n    <p>{`Weâ€™ll get an error back though:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cannot use currentObject (variable of type client.Object) as T value in argument to desiredObject.DeepCopyInto: need type assertion\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"swap-out-another-clientobject\"\n    }}>{`Swap out another client.Objectâ€¦`}</h2>\n    <p>{`Fine, youâ€™ll note we are still using `}<inlineCode parentName=\"p\">{`client.Object`}</inlineCode>{` as our type for currentObject, letâ€™s try and use `}<inlineCode parentName=\"p\">{`Reconcileable[T]`}</inlineCode>{` (which weâ€™ve aliased to `}<inlineCode parentName=\"p\">{`U`}</inlineCode>{` in this functionâ€™s scope) instead:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject[U Reconcilable[U]](ctx context.Context, kClient client.Client, desiredObject U) error {\n    desiredObjectName := types.NamespacedName{\n        Name:      desiredObject.GetName(),\n        Namespace: desiredObject.GetNamespace(),\n    }\n    var currentObject U\n    err := kClient.Get(ctx, desiredObjectName, currentObject)\n    if err != nil {\n        return err\n    }\n    desiredObject.DeepCopyInto(currentObject)\n    return nil\n}\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"this-is-why-we-tdd\"\n    }}>{`This is why we TDD`}</h1>\n    <p>{`This is why it is nice to call our functions rather than just write them. Our code compiles, but the tests fail to compile.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject_Test(t *testing.T) {\n    desiredObject := corev1.ConfigMap{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:      \"test-cm\",\n            Namespace: \"test-namespace\",\n        },\n    }\n    ctx := context.Background()\n    client := fake.NewClientBuilder().\n        Build()\n\n    err := ReconcileObject(ctx, client, desiredObject)\n    assert.NoError(t, err)\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`\"k8s.io/api/core/v1\".ConfigMap does not implement Reconcilable[\"k8s.io/api/core/v1\".ConfigMap] (wrong type for method DeepCopy)\n        have DeepCopy() *\"k8s.io/api/core/v1\".ConfigMap\n        want DeepCopy() \"k8s.io/api/core/v1\".ConfigMap\n`}</code></pre>\n    <p>{`Firstly, note that the type inference is doing its work here. We didnâ€™t need to explicitly provide a type parameter in the call to ReconcileObject because the compiler has figured out that U is of type `}<inlineCode parentName=\"p\">{`Reconcilable[corev1.ConfigMap]`}</inlineCode>{`. Good.`}</p>\n    <p>{`But we do have an error around the fact that the ConfigMap weâ€™ve passed is not allowed to call the methods defined on it, because they take a pointer receiver (e.g. they are defined as `}<inlineCode parentName=\"p\">{`func (in *ConfigMap) DeepCopy() *ConfigMap`}</inlineCode>{`). `}</p>\n    <p>{`Youâ€™ll recall in the last blog post that we mentioned that the fact that the receivers of DeepCopy and DeepCopyInto were pointers was `}<strong parentName=\"p\">{`Important`}</strong>{`. `}</p>\n    <p>{`This is because (when dealing with generics) Go behaves somewhat poorly (people will try to justify this to you, donâ€™t let them). `}</p>\n    <p>{`While normally a block of code like this is valid:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`desiredObject := *corev1.ConfigMap{...}\ndesiredObject.MethodOnPointerReceiver()\ndesiredObject.SomeMethodOnNonPointerReceiver()\n`}</code></pre>\n    <div className={styles[\"sidebarcontainer\"]}>\n      <span>\n        <iframe src=\"https://giphy.com/embed/czYviM4rx9oxFliHHj\" width=\"400\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen style={{\n          padding: \".5rem\",\n          maxWidth: \"100%\"\n        }}>\n\tclass=\"giphy-embed\"\n\t</iframe>\n      </span>\n      <span>\n        <p>{`When passing types around as type parameters, you are alllowed to call ONLY the pointer or value type methods, depending on which is passed. `}</p>\n        <p><strong parentName=\"p\">{`This is frankly hellacious. How do we fix it?`}</strong></p>\n        <p>{`We can write something like this and make the ConfigMap a pointer, because then it fulfills the interface:`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject_Test(t *testing.T) {\n    desiredObject := corev1.ConfigMap{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:      \"test-cm\",\n            Namespace: \"test-namespace\",\n        },\n    }\n    ctx := context.Background()\n    client := fake.NewClientBuilder().\n        Build()\n\n    ReconcileObject(ctx, client, &desiredObject)\n}\n`}</code></pre>\n        <p>{`See `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/Miles-Garnsey/go-generics-blog/commit/1df9bc03a681f20b38d52f6a97d95cac767bb00d\"\n          }}>{`here`}</a>{` for where the code is up to.`}</p>\n      </span>\n    </div>\n    <h2 {...{\n      \"id\": \"nope\"\n    }}>{`Nopeâ€¦`}</h2>\n    <p>{`But when we run this test, we error out with this error: `}<inlineCode parentName=\"p\">{`\"expected pointer, but got nil\"`}</inlineCode>{`. Why is this? Because we havenâ€™t allocated memory to `}<inlineCode parentName=\"p\">{`currentObject`}</inlineCode>{` by writing `}<inlineCode parentName=\"p\">{`var currentObject U`}</inlineCode>{`, weâ€™ve just declared a type. `}</p>\n    <h1 {...{\n      \"id\": \"allocating-memory-with-generics-and-new\"\n    }}>{`Allocating memory with generics and new()`}</h1>\n    <p>{`To allocate memory to a generic type, we need to use another new (I think?) language feature, the `}<inlineCode parentName=\"p\">{`new()`}</inlineCode>{` function. `}</p>\n    <p>{`By switching `}<inlineCode parentName=\"p\">{`var currentObject U`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`currentObject := new(U)`}</inlineCode>{` we can ensure that a real instance of the type `}<inlineCode parentName=\"p\">{`U`}</inlineCode>{` is created. `}</p>\n    <p>{`Change the function as per below (or this `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Miles-Garnsey/go-generics-blog/commit/ca76dc0b15edcff3261dbda30a9ff2fe08098f41\"\n      }}>{`commit`}</a>{`) and letâ€™s try again:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject[U Reconcilable[U]](ctx context.Context, kClient client.Client, desiredObject U) error {\n    desiredObjectName := types.NamespacedName{\n        Name:      desiredObject.GetName(),\n        Namespace: desiredObject.GetNamespace(),\n    }\n    currentObject := new(U)\n    err := kClient.Get(ctx, desiredObjectName, currentObject)\n    if err != nil {\n        return err\n    }\n    desiredObject.DeepCopyInto(currentObject)\n    return nil\n}\n`}</code></pre>\n    <p>{`Now we get a truly opaque error, as the compiler goes the full monty and moons us with its hairy ass:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cannot use currentObject (variable of type *U) as client.Object value in argument to kClient.Get: *U does not implement client.Object (type *U is pointer to type parameter, not type parameter)\n`}</code></pre>\n    <p>{`Now, I donâ€™t know what the ever living f&%$ that means, but I do know how to dereference a pointer, so letâ€™s see if that stops the compiler from exposing itâ€™s entirely ungroomed privates in our general direction:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject[U Reconcilable[U]](ctx context.Context, kClient client.Client, desiredObject U) error {\n    desiredObjectName := types.NamespacedName{\n        Name:      desiredObject.GetName(),\n        Namespace: desiredObject.GetNamespace(),\n    }\n    currentObject := new(U)\n    err := kClient.Get(ctx, desiredObjectName, *currentObject)\n    if err != nil {\n        return err\n    }\n    desiredObject.DeepCopyInto(*currentObject)\n    return nil\n}\n`}</code></pre>\n    <p>{`Now once again, we get back the same error we received before `}<inlineCode parentName=\"p\">{`expected pointer, but got nil`}</inlineCode>{`. If we debug this function, we can see why, the type on our `}<inlineCode parentName=\"p\">{`currentObject`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`*k8s.io/api/core/v1.ConfigMap nil`}</inlineCode>{`.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Miles-Garnsey/go-generics-blog/commit/e5a1ec91e1019481da2e136ff827a3c842df7692\"\n      }}>{`here`}</a>{` for a commit.`}</p>\n    <h1 {...{\n      \"id\": \"the-new-function-can-hurt-you\"\n    }}>{`The new() function can hurt you`}</h1>\n    <p>{`The reason for this is that `}<inlineCode parentName=\"p\">{`new()`}</inlineCode>{` always allocates the zero type for the passed type parameter. `}</p>\n    <p>{`Whatâ€™s our type parameter here? It is inferred from `}<inlineCode parentName=\"p\">{`&desiredObject`}</inlineCode>{` in this function call `}<inlineCode parentName=\"p\">{`ReconcileObject(ctx, client, &desiredObject)`}</inlineCode>{`, a pointer to a ConfigMap. Whatâ€™s the zero value of a pointer? Always nil.`}</p>\n    <h1 {...{\n      \"id\": \"what-have-we-learned\"\n    }}>{`What have we learned?`}</h1>\n    <p>{`Weâ€™ve learned that this shit is frustrating, and this was where I basically gave up; until, in a state of abject defeat while browsing Reddit on my phone, I found a post to a potential solution.`}</p>\n    <p>{`Iâ€™ll leave the links here as an exercise before our next installment. They convinced me the problem could be solved, but provided precisely zero help as to how to do so.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.reddit.com/r/golang/comments/uqwh5d/generics_new_value_from_pointer_type_with/\"\n      }}>{`https://www.reddit.com/r/golang/comments/uqwh5d/generics_new_value_from_pointer_type_with/`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#pointer-method-example\"\n      }}>{`https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#pointer-method-example`}</a></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"how-would-it-work-in-java\",\n    level: 2,\n    title: \"How would it work in Java?\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"other-than-alcohol-abuse---what-are-our-options\",\n    level: 2,\n    title: \"Other than alcohol abuse - what are our options?\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"embedded-interfaces\",\n    level: 2,\n    title: \"Embedded interfaces\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"type-parameters\",\n    level: 2,\n    title: \"Type parameters\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"swap-out-another-clientobject\",\n    level: 2,\n    title: \"Swap out another client.Objectâ€¦\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"nope\",\n    level: 2,\n    title: \"Nopeâ€¦\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n","module.exports = __webpack_public_path__ + \"static/media/gears.e4894639.PNG\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"document_image__1v_Cm\",\"figure\":\"document_figure__3yTkH\",\"sidebarcontainer\":\"document_sidebarcontainer__quzsW\",\"floatright\":\"document_floatright__1ByNo\",\"sidebar\":\"document_sidebar__1DteB\",\"rainbow\":\"document_rainbow__1sJeL\",\"rainbow-bg\":\"document_rainbow-bg__3rMHB\"};"],"sourceRoot":""}