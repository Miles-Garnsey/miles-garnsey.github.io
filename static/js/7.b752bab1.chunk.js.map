{"version":3,"sources":["routes/posts/2023-03-02-Making Go functions generic III/document.mdx","routes/posts/2023-03-02-Making Go functions generic III/document.module.css","routes/posts/2023-03-02-Making Go functions generic III/leonardo.gif","routes/posts/2023-03-02-Making Go functions generic III/trainwreck.gif"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_user_Documents_projects_blog_client_react_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","styles","src","leonardo","alt","style","width","trainwreck","marginRight","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter","module","exports","image","figure","sidebarcontainer","floatright","sidebar","rainbow","rainbow-bg","__webpack_require__","p"],"mappings":"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","file":"static/js/7.b752bab1.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"7 min read\",\"minutes\":6.73,\"time\":403800,\"words\":1346}\n/* @jsx mdx */\nimport styles from './document.module.css'\nimport leonardo from './leonardo.gif'\nimport trainwreck from './trainwreck.gif'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`OK, so you’ve read the links from the last blog in this series and probably found them as abstruse as I did. Perhaps even as abstruse as the word abstruse. `}</p>\n    <p>{`By reading the tea leaves and perhaps disembowelling some small animals in the hopes of divining the truth via haruspitic practice, I succeeded in reading the portents and interpreting the signs in the docs, finally arriving at a solution. `}</p>\n    <p>{`This is part III of this series, and I’m finally going to stop swearing (JKS), and teasing and provide it.`}</p>\n    <h1 {...{\n      \"id\": \"when-your-pointer-is-an-interface\"\n    }}>{`When your pointer is an interface`}</h1>\n    <p>{`As we’ve previously discussed, the core issue here is that our function signature reads as follows `}<inlineCode parentName=\"p\">{`func ReconcileObject[U Reconcilable[U]](ctx context.Context, kClient client.Client, desiredObject U)`}</inlineCode>{`, causing the call to `}<inlineCode parentName=\"p\">{`new(U)`}</inlineCode>{` in our function to yield a `}<inlineCode parentName=\"p\">{`nil`}</inlineCode>{` (which is unacceptable to `}<inlineCode parentName=\"p\">{`client.Get`}</inlineCode>{`). This is because `}<inlineCode parentName=\"p\">{`new()`}</inlineCode>{` always instantiates the zero value - which for a pointer is always `}<inlineCode parentName=\"p\">{`nil`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"calling-with-a-value-type\"\n    }}>{`Calling with a value type`}</h2>\n    <p>{`As cooked as this situation clearly is, let’s try and use a non-pointer type in the call to the function first, just to see what happens:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject_Test(t *testing.T) {\n    desiredObject := corev1.ConfigMap{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:      \"test-cm\",\n            Namespace: \"test-namespace\",\n        },\n    }\n    ctx := context.Background()\n    client := fake.NewClientBuilder().\n        Build()\n\n    err := ReconcileObject(ctx, client, &desiredObject)\n    assert.NoError(t, err)\n}\n\n`}</code></pre>\n    <p>{`Catch up on the whole repo at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Miles-Garnsey/go-generics-blog/commit/22d47b068f650180f00f721809eff61462b29857\"\n      }}>{`this commit`}</a>{`.`}</p>\n    <div className={styles[\"sidebarcontainer\"]}>\n      <span>\n        <figure className={styles[\"figure\"]}>\n  <img src={leonardo} className={styles[\"image\"]} alt=\"Elmo starting fire.\" style={{\n            width: \"30rem\"\n          }} />\n  <figcaption>Its rude to point.</figcaption>\n        </figure>\n      </span>\n      <span>\n        <p>{`The error reads:`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`\"k8s.io/api/core/v1\".ConfigMap does not satisfy Reconcilable[\"k8s.io/api/core/v1\".ConfigMap] (wrong type for method DeepCopy)\n        have DeepCopy() *\"k8s.io/api/core/v1\".ConfigMap\n        want DeepCopy() \"k8s.io/api/core/v1\".ConfigMapcompilerInvalidTypeArg\n`}</code></pre>\n        <p>{`Which is entirely unsurprising, since we’ve stated the non-pointer `}<inlineCode parentName=\"p\">{`ConfigMap`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`U`}</inlineCode>{` is the thing that must fulfil our interface `}<inlineCode parentName=\"p\">{`Reconcileable[U]`}</inlineCode>{`, and this is defined as:`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`type Reconcilable[T any] interface {\n    client.Object\n    DeepCopy() T\n    DeepCopyInto(T)\n}\n`}</code></pre>\n        <p>{`Whereas we know that for both `}<inlineCode parentName=\"p\">{`DeepCopy() T`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DeepCopyInto(T)`}</inlineCode>{` the `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` variable must be a pointer because that’s how it is defined on `}<inlineCode parentName=\"p\">{`ConfigMaps`}</inlineCode>{` (with a pointer receiver).`}</p>\n      </span>\n    </div>\n    <h2 {...{\n      \"id\": \"enforcing-that-your-type-is-a-pointer-to-its-type-parameter\"\n    }}>{`Enforcing that your type is a pointer to it’s type parameter`}</h2>\n    <p>{`I’ll cut to the chase. Based on my late night browsing, the fix for this is to have a trick (`}<inlineCode parentName=\"p\">{`*T`}</inlineCode>{`) in your interface and mention that some of the return values for the relevant methods are actually *T as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type Reconcilable[T any] interface {\n    client.Object\n    DeepCopy() *T\n    DeepCopyInto(*T)\n    *T\n}\n`}</code></pre>\n    <p>{`This means (and I’m making a guess, since I’ve seen no explanation interpretable by a child of man) that `}</p>\n    <ol>\n      <li parentName=\"ol\">{`T can call methods of `}{`*`}{`T and;`}</li>\n      <li parentName=\"ol\">{`That some of those methods return `}{`*`}{`T, not T.`}</li>\n    </ol>\n    <p>{`When we then write our reconciliation function, we can then do this, passing two LINKED type parameters:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject[T any, U Reconcilable[T]](ctx context.Context, kClient client.Client, desiredObject T) error {\n    desiredObjectName := types.NamespacedName{\n        Name:      desiredObject.GetName(),\n        Namespace: desiredObject.GetNamespace(),\n    }\n    currentObject := new(T)\n    err := kClient.Get(ctx, desiredObjectName, currentObject)\n    if err != nil {\n        return err\n    }\n    desiredObject.DeepCopyInto(currentObject)\n    return nil\n}\n`}</code></pre>\n    <p>{`See the whole repo at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Miles-Garnsey/go-generics-blog/commit/3d5a153d81e0ed7c550b87db984708c8b7c5629e\"\n      }}>{`this commit`}</a>{`.`}</p>\n    <p>{`The fact that we are passing type parameter `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` into `}<inlineCode parentName=\"p\">{`U`}</inlineCode>{` is critical, since we are asserting type constraints that `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`any`}</inlineCode>{`, but that it’s `}<strong parentName=\"p\">{`pointer`}</strong>{` must implement certain methods and interfaces. `}</p>\n    <p>{`A pleasing consequence: Go is smart enough (for once) to understand the constraints and make type inferences out of the `}<inlineCode parentName=\"p\">{`desiredObject`}</inlineCode>{`, so our callers never need to know they’ve told us their types. `}</p>\n    <p>{`Moreover, our call to `}<inlineCode parentName=\"p\">{`new(T)`}</inlineCode>{` now yields a real value of `}<inlineCode parentName=\"p\">{`ConfigMap{}`}</inlineCode>{` (and take significant note of the `}<inlineCode parentName=\"p\">{`{}`}</inlineCode>{` appended, because they are also critical).`}</p>\n    <p>{`Oh but we still have plenty of errors:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`desiredObject.GetName undefined (type T has no field or method GetName)\ndesiredObject.GetNamespace undefined (type T has no field or method GetNamespace)\ndesiredObject.DeepCopyInto undefined (type T has no field or method DeepCopyInto)\n`}</code></pre>\n    <p>{`So we might think to try adding a variety of `}<inlineCode parentName=\"p\">{`&`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` operators to our variables to pointerise and dereference our way out of this mess. Perhaps something like;`}</p>\n    <div className={styles[\"sidebarcontainer\"]}>\n      <span>\n        <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject[T any, U Reconcilable[T]](ctx context.Context, kClient client.Client, desiredObject T) error {\n    desiredObjectName := types.NamespacedName{\n        Name:      (&desiredObject).GetName(),\n        Namespace: (&desiredObject).GetNamespace(),\n    }\n    currentObject := new(T)\n    err := kClient.Get(ctx, desiredObjectName, &currentObject)\n    if err != nil {\n        return err\n    }\n    (&desiredObject).DeepCopyInto(currentObject)\n    return nil\n}\n`}</code></pre>\n        <p>{`See `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/Miles-Garnsey/go-generics-blog/commit/b86287c8a12c142473fdde0bf4040f43af8b49b9\"\n          }}>{`this commit`}</a>{`.`}</p>\n        <p>{`This would also crash and burn in truly spectacular fashion, do you know why? I don’t. All I know is that converting between pointer and value types doesn’t work like this when you’re dealing with generics. `}</p>\n      </span>\n      <span>\n        <figure className={styles[\"figure\"]}>\n  <img src={trainwreck} className={styles[\"image\"]} alt=\"a trainwreck.\" style={{\n            width: \"40rem\"\n          }} />\n  <figcaption>Actual footage of this attempt to massage types.</figcaption>\n        </figure>\n      </span>\n    </div>\n    <h2 {...{\n      \"id\": \"explicitly-casting-between-pointer-and-value-types\"\n    }}>{`Explicitly casting between pointer and value types`}</h2>\n    <p>{`What you have to do is explicitly cast between your `}<strong parentName=\"p\">{`type parameters`}</strong>{`. `}</p>\n    <p>{`To be clear, this logic is replete with memory allocations and performance implications - which I don’t care about; because logical correctness and being able to encapsulate logic is more important to me than my cloud bill, and I charge more than an extra two CPUs per hour. `}</p>\n    <p>{`But be aware that in frequently called code this situation is suboptimal. Perhaps in frequently called code, consider using a programming language which is not a LOC generation toy.`}</p>\n    <p>{`Instead of a rational situation where we `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`&`}</inlineCode>{` our little bytes into the right form, We need to do this instead:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func ReconcileObject[T any, U Reconcilable[T]](ctx context.Context, kClient client.Client, desiredObject T) error {\n    desiredObjectName := types.NamespacedName{\n        Name:      U(&desiredObject).GetName(),\n        Namespace: U(&desiredObject).GetNamespace(),\n    }\n    currentObject := new(T)\n    err := kClient.Get(ctx, desiredObjectName, U(currentObject))\n    if err != nil && !errors.IsNotFound(err) {\n        return err\n    }\n    U(&desiredObject).DeepCopyInto(currentObject)\n    return nil\n}\n`}</code></pre>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Miles-Garnsey/go-generics-blog/commit/d7f0fb0ddaff71bc05d995965a461d0cc7efd432\"\n      }}>{`here`}</a>{` for the final result.`}</p>\n    <div className={styles[\"sidebarcontainer\"]}>\n      <span>\n        <h1 {...{\n          \"id\": \"wrapping-up\"\n        }}>{`Wrapping up`}</h1>\n        <p>{`I had some choice words about how difficult this was, but I think since you’ve all been on the journey you can imagine the look of slack jawed disbelief on my face when I finally got it working. I have reservations about the performance of this solution since my understanding is that each cast of the variable may take a copy. But I haven’t busted out a disassembler to confirm my suspicions.`}</p>\n        <p>{`Ultimately, what the solution comes down to is as simple as this:`}</p>\n        <ol>\n          <li parentName=\"ol\">{`The new keyword always allocates an empty value, and because the empty value of a pointer is always a pointer, we need some way to indicate that we want an empty value of the value type.`}</li>\n          <li parentName=\"ol\">{`We simultaneously need to make assertions about the methods available on the pointer of that value type (since this is where all our copy methods reside).`}</li>\n          <li parentName=\"ol\">{`We can access both the value and pointer types of a given type by (a) passing both value and pointer as type parameters, while (b) simultaneously asserting that we are allowed obtain a pointer to the type in the interface.`}</li>\n        </ol>\n      </span>\n      <span className={styles[\"sidebar\"]} styles={{\n        marginRight: \"1rem\"\n      }}>\n        <h1 {...{\n          \"id\": \"one-final-warning\"\n        }}>{`One final warning`}</h1>\n        <p>{`There is one final thing to note about this solution, which is that it can hurt you in the case that you intend to write a function to mutate `}<inlineCode parentName=\"p\">{`desiredObject`}</inlineCode>{`. I believe that may be the language designer’s justification for point (3a) above.`}</p>\n        <p>{`While you can use type casting between pointer and value type parameters (and use type assertions to declare that a pointer to a type satisfies certain conditions), you need to recall that no matter what contortions you perform, you won’t have access to the original variable because it was passed by value. `}</p>\n        <p>{`Because it was passed as a value type, a copy is taken before `}<inlineCode parentName=\"p\">{`ReconcileObject`}</inlineCode>{` ever gets to see it, and consequently `}<inlineCode parentName=\"p\">{`ReconcileObject`}</inlineCode>{` can’t mutate the original variable. But we don’t want to do that here anyway, and I’m sure you can imagine some convoluted mechanism via which you can wrap your pointer types in a struct so that a copy of the pointer is passed which retains access to the orginal memory location.`}</p>\n        <p>{`Or you could just use Java and forget about all this pointer nonsense, functions should be pure anyway.`}</p>\n      </span>\n    </div>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"calling-with-a-value-type\",\n    level: 2,\n    title: \"Calling with a value type\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"enforcing-that-your-type-is-a-pointer-to-its-type-parameter\",\n    level: 2,\n    title: \"Enforcing that your type is a pointer to it’s type parameter\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"explicitly-casting-between-pointer-and-value-types\",\n    level: 2,\n    title: \"Explicitly casting between pointer and value types\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"document_image__3yQbj\",\"figure\":\"document_figure__1javc\",\"sidebarcontainer\":\"document_sidebarcontainer__1goNB\",\"floatright\":\"document_floatright__VmDXX\",\"sidebar\":\"document_sidebar__2tkcP\",\"rainbow\":\"document_rainbow__3gbGp\",\"rainbow-bg\":\"document_rainbow-bg__3WADk\"};","module.exports = __webpack_public_path__ + \"static/media/leonardo.d9a9171e.gif\";","module.exports = __webpack_public_path__ + \"static/media/trainwreck.02372606.gif\";"],"sourceRoot":""}