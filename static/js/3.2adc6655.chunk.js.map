{"version":3,"sources":["routes/posts/2019-09-10-Data Engineering Pt 3/document.mdx","routes/posts/2019-09-10-Data Engineering Pt 3/document.module.css","routes/posts/2019-09-10-Data Engineering Pt 3/Post 3 - Application running.png","routes/posts/2019-09-10-Data Engineering Pt 3/stern.gif","routes/posts/2019-09-10-Data Engineering Pt 3/inception.gif"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_user_Documents_projects_blog_client_react_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","parentName","href","className","styles","id","src","byhand","style","width","maxWidth","height","alt","clear","class","inception","fontSize","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","minWidth","apprunning","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter","module","exports","image","figure","figureright","figureleft","sidebarcontainer","sidebar","__webpack_require__","p"],"mappings":"uWAGaA,EAAc,CAACC,KAAO,cAAcC,QAAU,OAAOC,KAAO,OAAOC,MAAQ,MAYlFC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAE5EJ,OAAAE,EAAA,EAAAF,CAAA,wQACAA,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,UAAQK,WAAW,KAAnB,8CACHL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,kIACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,yIACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,kLACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,0CAEFL,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,UAAQK,WAAW,KAAnB,gDACHL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,6FACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,8EACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,mFACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,qQAEFL,OAAAE,EAAA,EAAAF,CAAA,iGAA4FA,OAAAE,EAAA,EAAAF,CAAA,UAAQK,WAAW,KAAnB,oIAA5F,yJACAL,OAAAE,EAAA,EAAAF,CAAA,sDAAiDA,OAAAE,EAAA,EAAAF,CAAA,UAAQK,WAAW,KAAnB,4CAAjD,WAAoIL,OAAAE,EAAA,EAAAF,CAAA,UAAQK,WAAW,KAAnB,wCAApI,2KACAL,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,KAAf,sKAAqLL,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,MAAS,CACzMC,KAAQ,yIACPN,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,yBAFJ,oIAE6ML,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,OAF7M,oIAGHL,OAAAE,EAAA,EAAAF,CAAA,OAAKO,UAAWC,IAAM,kBACpBR,OAAAE,EAAA,EAAAF,CAAA,QAAMO,UAAWC,IAAM,SACrBR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNS,GAAM,kBADR,kBAGAT,OAAAE,EAAA,EAAAF,CAAA,8EACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,wIAA6JL,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,MAAS,CAChLC,KAAQ,iCADiJ,eAA7J,8DAGAN,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,0NACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,qNACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,kQACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,oHAEFL,OAAAE,EAAA,EAAAF,CAAA,ubAEFA,OAAAE,EAAA,EAAAF,CAAA,YACEA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNS,GAAM,aADR,aAGAT,OAAAE,EAAA,EAAAF,CAAA,4OAAkOA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,kBAAlO,WAAwSL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,WAAxS,iGAA6bL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,UAA7b,qBAAqgBL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,mBAArgB,kGAAmqBL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,gBAAnqB,uGAAm0BL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,uBAAn0B,MACAL,OAAAE,EAAA,EAAAF,CAAA,4EAAuEA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,6BAAvE,4LAAyUL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,yBAAzU,4LAAukBL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,yBAAvkB,uEAA2sBL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,UAA3sB,6DAAizBL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,UAAjzB,kEAAs6BL,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,KAAQ,CACx7BC,KAAQ,mBAD05B,iBAAt6B,KAGAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNS,GAAM,uCADR,uCAGAT,OAAAE,EAAA,EAAAF,CAAA,wYACAA,OAAAE,EAAA,EAAAF,CAAA,UAAQO,UAAWC,IAAM,YAC/BR,OAAAE,EAAA,EAAAF,CAAA,OAAKU,IAAKC,IAAQC,MAAO,CACfC,MAAO,OACPC,SAAU,UACVC,OAAQ,QACPR,UAAWC,IAAM,MAAWQ,IAAI,kBAC3ChB,OAAAE,EAAA,EAAAF,CAAA,gFAEMA,OAAAE,EAAA,EAAAF,CAAA,0dACAA,OAAAE,EAAA,EAAAF,CAAA,8OAGJA,OAAAE,EAAA,EAAAF,CAAA,OAAKY,MAAO,CACVC,MAAO,OACPI,MAAO,UAGTjB,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNS,GAAM,0CADR,0CAGAT,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,UAAQK,WAAW,KAAnB,6BAAqDL,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,UAAa,CAC7EC,KAAQ,wDAD0C,QAArD,KAAH,kNAGAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNS,GAAM,0BADR,2BAGAT,OAAAE,EAAA,EAAAF,CAAA,0KAAgKA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAAhK,iOACAL,OAAAE,EAAA,EAAAF,CAAA,4BAAuBA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAAvB,yIAA2ML,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,KAAQ,CAC7NC,KAAQ,oCAD+L,QAA3M,KAEuBN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,KAAQ,CACzCC,KAAQ,mCADW,WAFvB,OAI4BN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,KAAQ,CAC9CC,KAAQ,qBADgB,QAJ5B,SAM2BN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,KAAQ,CAC7CC,KAAQ,sDADe,UAN3B,yCAQ6DN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,KAAQ,CAC/EC,KAAQ,yBADiD,YAR7D,8JAU0KN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,KAAQ,CAC5LC,KAAQ,oDAD8J,UAV1K,MAaAN,OAAAE,EAAA,EAAAF,CAAA,mKACAA,OAAAE,EAAA,EAAAF,CAAA,OAAKO,UAAWC,IAAM,kBACpBR,OAAAE,EAAA,EAAAF,CAAA,QAAMO,UAAWC,IAAM,SACrBR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNS,GAAM,mCADR,2CAGAT,OAAAE,EAAA,EAAAF,CAAA,UAAQkB,MAAOV,IAAM,aAC3BR,OAAAE,EAAA,EAAAF,CAAA,OAAKU,IAAKS,IAAWZ,UAAWC,IAAM,MAAWQ,IAAI,eACrDhB,OAAAE,EAAA,EAAAF,CAAA,cAAYY,MAAO,CACTQ,SAAU,YADpB,2CAIMpB,OAAAE,EAAA,EAAAF,CAAA,mSACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,6DACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,mFACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,kCAAuDL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,MAAvB,WAAvD,yEAEFL,OAAAE,EAAA,EAAAF,CAAA,8SACAA,OAAAE,EAAA,EAAAF,CAAA,+HAA0HA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,0CAA1H,4KAEFL,OAAAE,EAAA,EAAAF,CAAA,+EACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAKL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,MAAvB,cACpBL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAKL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,MAAvB,0BACpBL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAKL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,MAAvB,wBAEtBL,OAAAE,EAAA,EAAAF,CAAA,wFAAmFA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAAnF,6PAAgYL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAAhY,mHACAL,OAAAE,EAAA,EAAAF,CAAA,iSACAA,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,UAAQK,WAAW,KAAnB,qGAAwHL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,UAAvB,+BAAxH,sHACHL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAME,WAAW,OAAU,CAC5BE,UAAa,gBACbc,gBAAiB,OACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,4vBAGhBxB,OAAAE,EAAA,EAAAF,CAAA,wCAAmCA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAAnC,4DAA+IL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,2BAA/I,QAA2NL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAA3N,8KAAobL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,aAApb,wCAAkhBL,OAAAE,EAAA,EAAAF,CAAA,UAAQK,WAAW,KAAnB,+GAClhBL,OAAAE,EAAA,EAAAF,CAAA,omBACAA,OAAAE,EAAA,EAAAF,CAAA,wFAA8EA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAA9E,iEAA+LL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,oFAA/L,8BAEFL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNS,GAAM,2DADR,4DAGAT,OAAAE,EAAA,EAAAF,CAAA,2CAAsCA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,cAAtC,UAAuGL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,UAAvG,+EAAyOL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAAzO,iBAA0SL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,eAA1S,wCAA0YL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,UAA1Y,0JAA6kBL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,qCAA7kB,KACAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAME,WAAW,OAAU,CAC5BE,UAAa,iBACbc,gBAAiB,QACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,gkEAGhBxB,OAAAE,EAAA,EAAAF,CAAA,kLAA6KA,OAAAE,EAAA,EAAAF,CAAA,UAAQK,WAAW,KAAnB,0QAC7KL,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,KAAf,udACHL,OAAAE,EAAA,EAAAF,CAAA,kKACAA,OAAAE,EAAA,EAAAF,CAAA,8GAAoGA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,cAApG,oYACAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAME,WAAW,OAAU,CAC5BE,UAAa,iBACbc,gBAAiB,QACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,ipGAGhBxB,OAAAE,EAAA,EAAAF,CAAA,obACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNS,GAAM,4FADR,wGAGAT,OAAAE,EAAA,EAAAF,CAAA,gFAA2EA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,sBAA3E,+QACAL,OAAAE,EAAA,EAAAF,CAAA,oIACAA,OAAAE,EAAA,EAAAF,CAAA,wHAAmHA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,mBAAnH,oCAAmNL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,eAAnN,oMACAL,OAAAE,EAAA,EAAAF,CAAA,6EAAwEA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAAxE,4GACAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAME,WAAW,OAAU,CAC5BE,UAAa,iBACbc,gBAAiB,QACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,qyDAGhBxB,OAAAE,EAAA,EAAAF,CAAA,sBACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAME,WAAW,OAAU,CAC5BE,UAAa,iBACbc,gBAAiB,QACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,s1EAGhBxB,OAAAE,EAAA,EAAAF,CAAA,kEAA6DA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,OAA7D,+DAA4KL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,WAA5K,uBAAuPL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,KAAvP,qLAA0dL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,qBAA1d,kBAA0iBL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,mBAA1iB,mCACAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNS,GAAM,8BADR,qCAGAT,OAAAE,EAAA,EAAAF,CAAA,oDACAA,OAAAE,EAAA,EAAAF,CAAA,+cAA4aA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,qBAA5a,0BACAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAME,WAAW,OAAU,CAC5BE,UAAa,gBACbc,gBAAiB,OACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,qPAGhBxB,OAAAE,EAAA,EAAAF,CAAA,yFAA+EA,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,wEAA/E,gCAAgOL,OAAAE,EAAA,EAAAF,CAAA,cAAYK,WAAW,KAAvB,kBAAhO,2FACAL,OAAAE,EAAA,EAAAF,CAAA,UAAQQ,OAAQ,CACdiB,SAAU,SAEdzB,OAAAE,EAAA,EAAAF,CAAA,OAAKU,IAAKgB,IAAYnB,UAAWC,IAAM,MAAWQ,IAAI,sCACtDhB,OAAAE,EAAA,EAAAF,CAAA,kEAMFJ,EAAW+B,gBAAiB,EACrB,IAAMC,EAAkB,WAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAAmB,CAChD,CACEpB,GAAI,iBACJuB,MAAO,EACPC,MAAO,iBACPC,SAAU,IAId,CACIzB,GAAI,YACJuB,MAAO,EACPC,MAAO,YACPC,SAAU,IAId,CACIzB,GAAI,sCACJuB,MAAO,EACPC,MAAO,sCACPC,SAAU,IAId,CACIzB,GAAI,yCACJuB,MAAO,EACPC,MAAO,yCACPC,SAAU,IAId,CACIzB,GAAI,yBACJuB,MAAO,EACPC,MAAO,0BACPC,SAAU,CACN,CACMzB,GAAI,kCACJuB,MAAO,EACPC,MAAO,0CACPC,SAAU,MAMxB,CACIzB,GAAI,0DACJuB,MAAO,EACPC,MAAO,2DACPC,SAAU,CACN,CACMzB,GAAI,2FACJuB,MAAO,EACPC,MAAO,uGACPC,SAAU,IAIlB,CACQzB,GAAI,6BACJuB,MAAO,EACPC,MAAO,oCACPC,SAAU,QAQXC,EAAc,uBC/S3BC,EAAAC,QAAA,CAAkBC,MAAA,wBAAAC,OAAA,yBAAAC,YAAA,8BAAAC,WAAA,6BAAAC,iBAAA,mCAAAC,QAAA,+CCDlBP,EAAAC,QAAiBO,EAAAC,EAAuB,6ECAxCT,EAAAC,QAAiBO,EAAAC,EAAuB,sDCAxCT,EAAAC,QAAiBO,EAAAC,EAAuB","file":"static/js/3.2adc6655.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"15 min read\",\"minutes\":14.845,\"time\":890700,\"words\":2969}\n/* @jsx mdx */\nimport styles from './document.module.css'\nimport apprunning from './Post 3 - Application running.png'\nimport byhand from './stern.gif'\nimport inception from './inception.gif'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`OK, now we have something resembling a platform that we can develop against, let’s talk about how our application will actually work (finally, you gasp). This is an application which will collect data from Twitter and make it available to others.`}</p>\n    <p><strong parentName=\"p\">{`At the top level, we need to think about;`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`How long we want to store the data for - is it just until the next service has time to access it, or is it a permanent record?`}</li>\n      <li parentName=\"ol\">{`Do the individual records have any sort of history (for example, how do we treat edits to Tweets) and do we want to retain all of it?`}</li>\n      <li parentName=\"ol\">{`Does the structure of the data change? If so, how do we manage changes to the data structure such that consumers expecting a previous structure can consume the new structure?`}</li>\n      <li parentName=\"ol\">{`Velocity, variety and volume of data.`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Translating through to a technical design -`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`We want to store the data forever, this is a data storage system, not a messaging system.`}</li>\n      <li parentName=\"ol\">{`For the sake of simplicity, we will overwrite previous versions of tweets.`}</li>\n      <li parentName=\"ol\">{`We do not control the data structure, and should therefore expect it to change.`}</li>\n      <li parentName=\"ol\">{`We really only have one type of data present, which is tweets and we can scale for velocity and volume using more instances in our Kafka consumer group (but see the note in italics below, and my forthcoming post on Kafka for some roadbumps in this story.).`}</li>\n    </ol>\n    <p>{`Translating through to the implementation - (1) and (2) suggest that what we want is `}<strong parentName=\"p\">{`the most recent version of each record emitted stored forever - so we’ll need to set our Kafka topics to use log compaction`}</strong>{`. We then just need to ensure that the duplicated data is retained for long enough that all consumers can pick it up before old versions are deleted.`}</p>\n    <p>{`Requirement (3) can be addressed by using `}<strong parentName=\"p\">{`Avro’s schema evolution (next post)`}</strong>{`, while `}<strong parentName=\"p\">{`velocity is addressed by using Kafka`}</strong>{` (throughput can be increased by horizontal scaling of brokers and application instances), volume is the same story, and the variety concern is not very relevant here.`}</p>\n    <p><em parentName=\"p\">{`NB: I believe that there is something in the developer’s agreement with Twitter to the effect that tweets need to be deleted from your app if a corresponding `}<a parentName=\"em\" {...{\n          \"href\": \"http://danielasfregola.github.io/twitter4s/6.1/api/com/danielasfregola/twitter4s/entities/streaming/common/StatusDeletionNotice.html\"\n        }}><inlineCode parentName=\"a\">{`StatusDeletionNotice`}</inlineCode></a>{` if received. I am not touching on this, because my assumption is that you are running a temporary environment which is deleting `}<em parentName=\"em\">{`ALL`}</em>{` data on every restart. If this is not the case, and you get sued or something, you can’t say I didn’t warn you…`}</em></p>\n    <div className={styles[\"sidebarcontainer\"]}>\n      <span className={styles[\"sidebar\"]}>\n        <h3 {...{\n          \"id\": \"design-choices\"\n        }}>{`Design Choices`}</h3>\n        <p>{`Given the way Kafka works we have a few choices we need to make -`}</p>\n        <ol>\n          <li parentName=\"ol\">{`Number of topics - In this case we know we have a single topic and there are apparently few decisions to make. See the previous post `}<a parentName=\"li\" {...{\n              \"href\": \"../../2019-09-06/About-Kafka\"\n            }}>{`about Kafka`}</a>{` for some of the intricacies that influence this decision.`}</li>\n          <li parentName=\"ol\">{`Number of partitions - This will set the maximum number of application instances we can ever deploy to scale horizontally, and will also set the maximum number of Kafka brokers which can contribute to data storage.`}</li>\n          <li parentName=\"ol\">{`Number of replications - Because we only have a single broker on our test platform, we can only have one rep, but we would have more choice in a production cluster and should consider this at development time.`}</li>\n          <li parentName=\"ol\">{`ISR settings - If a write is in progress and we have one replica on a single broker, do we acknowledge to the producer that the data is written, or wait for the data to replicate to more brokers to ensure that a broker failure can’t cause data loss?`}</li>\n          <li parentName=\"ol\">{`Number of application instances - This is often easier to scale in production than is the number of partitions.`}</li>\n        </ol>\n        <p>{`As with all things distributed, we should always think of a world in which our cluster is built from one hundred slow machines, rather than 10 fast ones. Generally, smaller instances cost less on the cloud, so the better you can distribute your application the more money you save. It also helps with scaling, should you Enhance Shareholder Value sufficiently to Drive the Step Change and Experience Hockey-Stick Growth. Yay.`}</p>\n      </span>\n      <span>\n        <h3 {...{\n          \"id\": \"retention\"\n        }}>{`Retention`}</h3>\n        <p>{`We’re using log compaction to retain the most recent iteration of each tweet, in contrast to the standard cleanup strategy - delete - log compaction keeps the most recent value for each key. Log compacted topics have a `}<inlineCode parentName=\"p\">{`cleanup.policy`}</inlineCode>{` set to `}<inlineCode parentName=\"p\">{`compact`}</inlineCode>{`, but the conditions under which the compaction actually takes place are a bit confusing. The `}<inlineCode parentName=\"p\">{`delete`}</inlineCode>{` option would use `}<inlineCode parentName=\"p\">{`retention.bytes`}</inlineCode>{` (which controls maximum topic size, and is disabled with a value of -1 by default) as well as `}<inlineCode parentName=\"p\">{`retention.ms`}</inlineCode>{`, which controls the maximum age of a record before deletion occurs (and is not to be confused with `}<inlineCode parentName=\"p\">{`delete.retention.ms`}</inlineCode>{`).`}</p>\n        <p>{`But when we use a compaction cleanup strategy, it actually uses `}<inlineCode parentName=\"p\">{`min.cleanable.dirty.ratio`}</inlineCode>{` - the proportion of log space consumed by old records as a value between 0 and 1. Complicating the situation further is that no compaction can take place before the value specified in `}<inlineCode parentName=\"p\">{`min.compaction.lag.ms`}</inlineCode>{`, which we can use to our advantage to ensure that consumers have an opportunity to read the data before it is compacted. Note that what is missing is an ability to set a corresponding `}<inlineCode parentName=\"p\">{`max.compaction.lag.ms`}</inlineCode>{`, so don’t think of log compaction as a way to fake a database `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` operation (a common error), it isn’t - it’s an `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{`. For more ways you can think incorrectly about Kafka, see the `}<a parentName=\"p\" {...{\n            \"href\": \"../About-Kafka\"\n          }}>{`previous post`}</a>{`.`}</p>\n        <h3 {...{\n          \"id\": \"managing-dev-and-production-configs\"\n        }}>{`Managing dev and production configs`}</h3>\n        <p>{`So we have a pretty good idea of the low level/transport layer for the data now, and we’ve come up with a way to use Kafka to address points one and two from our technical design to get data across the cluster in a reasonable and safe way. Refer to twitter-topic.conf for a summary of the appropriate settings, if you’ve been following the above they should make sense.`}</p>\n        <figure className={styles[\"figureleft\"]}>\n  <img src={byhand} style={{\n            width: 'auto',\n            maxWidth: 'inherit',\n            height: 'auto'\n          }} className={styles[\"image\"]} alt=\"Guy laughing.\" />\n  <figcaption>Yes, all of our infrastructure is code deployed in CI/CD.</figcaption>\n        </figure>\n        <p>{`The only problem is that we only have a single broker on our cluster, so how can we have three replications? Trying to create this topic will result in an error. I’m leaving it that way, because that’s how we’d like to see it in production, where we won’t be able to change that value - because we’ll be using source control or a CI/CD pipeline to push our changes and definitely won’t be creating any topics by hand… right..?`}</p>\n        <p>{`I may post about building a tool to parse and apply these files later, but overriding these kinds of configs in our dev environment is what etcd is there for (among other things), and we’ll cover that in a future post.`}</p>\n      </span>\n    </div>\n    <div style={{\n      width: '100%',\n      clear: 'both'\n    }}>\n    </div>\n    <h2 {...{\n      \"id\": \"producing-messages-to-kafka-from-scala\"\n    }}>{`Producing messages to Kafka from Scala`}</h2>\n    <p><strong parentName=\"p\">{`Grab the Github repo from `}<a parentName=\"strong\" {...{\n          \"href\": \"https://github.com/Miles-Garnsey/DataEngineeringPt3\"\n        }}>{`here`}</a>{`.`}</strong>{` If (like me) you’re really a Python engineer and not wholly impressed with the whole idea of compilation generally, you’ll probably find this folder structure to be a dog’s breakfast. Sorry.`}</p>\n    <h2 {...{\n      \"id\": \"one-click-deploy---wow\"\n    }}>{`One click deploy - Wow.`}</h2>\n    <p>{`I’m even more sorry to report that this is a standard Scala project, with a structure common to those using the fairly ubiquitous(ly derided) build tool `}<inlineCode parentName=\"p\">{`sbt`}</inlineCode>{`. Do not blame me, I do not make the rules. While other options (Ammonite especially) exist, we couldn’t demo all of the Avrohugger things we’d like to from there, so we may as well get the pain over with early.`}</p>\n    <p>{`You can install `}<inlineCode parentName=\"p\">{`sbt`}</inlineCode>{` yourself, Google is your friend if you have difficulty. You’ll also likely want an IDE suited to Scala, your main options being `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.jetbrains.com/idea/\"\n      }}>{`IDEA`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://code.visualstudio.com/\"\n      }}>{`VS Code`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://atom.io/\"\n      }}>{`Atom`}</a>{` with `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.scala-lang.org/2019/04/16/metals.html\"\n      }}>{`Metals`}</a>{`, or hacking something together using `}<a parentName=\"p\" {...{\n        \"href\": \"https://ammonite.io/\"\n      }}>{`Ammonite`}</a>{`, an editor, and some way to work with an SBT file (which might just be manually copying stuff given the top hit for “sbt ammonite” on Google is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/alexarchambault/sbt-ammonite\"\n      }}>{`broken`}</a>{`).`}</p>\n    <p>{`None of these options is great, but IDEA is quick to get running (although it frequently produces false positive errors and other strange behaviours).`}</p>\n    <div className={styles[\"sidebarcontainer\"]}>\n      <span className={styles[\"sidebar\"]}>\n        <h3 {...{\n          \"id\": \"wheres-my-code-five-levels-deep\"\n        }}>{`Where’s my code? Five levels deep.`}</h3>\n        <figure class={styles[\"figureright\"]}>\n  <img src={inception} className={styles[\"image\"]} alt=\"Inception.\" />\n  <figcaption style={{\n            fontSize: \"smaller\"\n          }}>Are we still in the project directory?</figcaption>\n        </figure>\n        <p>{`Ah… Yes. We all know that one of the best ways to convince your boss that you’ve done some work is to completely bamboozle them, and often some sort of directory structure Inception is just the ticket. Scala lore therefore institutes unquestionable rules stating that:`}</p>\n        <ol>\n          <li parentName=\"ol\">{`Only one class, in only one file, shall exist per folder.`}</li>\n          <li parentName=\"ol\">{`That every class shall exist in its own namespace, inside one of those folders.`}</li>\n          <li parentName=\"ol\">{`That the namespaces defined in `}<inlineCode parentName=\"li\">{`package`}</inlineCode>{` statements and folder structure shall reflect each other perfectly.`}</li>\n        </ol>\n        <p>{`Follow them, and I guarantee that by the time your boss has finished clicking through the endlessly nested hierarchy of filesystem goodies, they’ll have forgotten what they were looking for in the first place; and will not ask you questions. Truly, Scala is an enterprise-fit anguage.`}</p>\n        <p>{`I note that I have severely violated these rules in this tute by basically chucking everything in the same folder (`}<inlineCode parentName=\"p\">{`main.scala.io.github.milesgarnsey.blog`}</inlineCode>{`). This has the pleasing upside that I don’t have to import my own code, and suits my purposes in that my reader may actually understand some of what is going on.`}</p>\n      </span>\n      <p>{`To start with, have a look at the build system files - especially;`}</p>\n      <ol>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`build.sbt`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`./project/plugins.sbt`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`./project/.sbtopts`}</inlineCode></li>\n      </ol>\n      <p>{`(1) defines the libraries you want to use, and (in our case) (2) defines an `}<inlineCode parentName=\"p\">{`sbt`}</inlineCode>{` plugin to build Docker containers. Finally, (3) saves us a lot of head scratching down the line when we start hitting mysterious heap errors - which is something that can happen during both compilation and run phases, thanks to the joys of the JVM. `}<inlineCode parentName=\"p\">{`sbt`}</inlineCode>{` creates plenty of additional cruft (which is both distracting and infuriating), but most of it can be ignored.`}</p>\n      <p>{`If we’re modern developers, it would be nice if we could get this into our cluster relatively seamlessly, but (from the second post in this series) we know that there are some complexities behind getting docker images into minikube, let alone unpackaged application code.`}</p>\n      <p><strong parentName=\"p\">{`What we didn’t mention, is that to access the docker daemon in minikube, we can actually run `}<inlineCode parentName=\"strong\">{`eval $(minikube docker-env)`}</inlineCode>{`, which will then direct the commands we’re typing into our regular Docker client back into the Minikube VM.`}</strong></p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\",\n          \"data-language\": \"bash\",\n          \"data-highlighted-line-numbers\": \"\",\n          \"dangerouslySetInnerHTML\": {\n            \"__html\": \"<span class=\\\"token builtin class-name\\\">eval</span> <span class=\\\"token variable\\\"><span class=\\\"token variable\\\">$(</span>minikube docker-env<span class=\\\"token variable\\\">)</span></span>\\n<span class=\\\"token punctuation\\\">(</span>cd <span class=\\\"token punctuation\\\">..</span> <span class=\\\"token operator\\\">&amp;&amp;</span> sbt docker:publishLocal<span class=\\\"token punctuation\\\">)</span>\\nkubectl --namespace<span class=\\\"token operator\\\">=</span>dev delete pods,replicasets.apps -l <span class=\\\"token assign-left variable\\\">app</span><span class=\\\"token operator\\\">=</span>data-engineering-blog\\nkubectl apply -f deploy.yaml\\nkubectl logs -f -p -l <span class=\\\"token string\\\">\\\"app=data-engineering-blog\\\"</span> --all-containers<span class=\\\"token operator\\\">=</span>true\\n\"\n          }\n        }}></code></pre>\n      <p>{`So because we also have the `}<inlineCode parentName=\"p\">{`sbt`}</inlineCode>{` packager set up to use Docker, we can actually just run `}<inlineCode parentName=\"p\">{`sbt docker:publishLocal`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`sbt`}</inlineCode>{` will publish to Minikube. I’ve included a K8s manifest to ensure that this all works correctly once we hit deploy. More likely, you will just run the script above - `}<inlineCode parentName=\"p\">{`deploy.sh`}</inlineCode>{` without thinking too much about it. `}<strong parentName=\"p\">{`Congratulations, laziness is becoming in a data scientist, and you’re developing well in this regard.`}</strong></p>\n      <p>{`We could get a lot fancier and do this with CI/CD servers which hook up to Github (GoCD, Jenkins spring to mind), and private Docker Registries which receive their output images and redeploy the app. There are some nice tools that do all of this stuff in a single place (Gitlab for example), but really, what we have here is pretty effective, and almost zero config is required. When you’re moving jobs frequently (e.g. if you have the joy of being a consultant, contractor, or other variety of gun for hire as I do), simple deployment pipelines that rely mostly on basic linux tools are great.`}</p>\n      <p>{`Now let’s have a look at this compiled-language-business shall we? Our `}<inlineCode parentName=\"p\">{`sbt`}</inlineCode>{` build definition told us where the main class can be found - `}<inlineCode parentName=\"p\">{`Compile / mainClass := Some(\"main.scala.io.github.milesgarnsey.blog.Entrypoint\")`}</inlineCode>{`, let’s start there.`}</p>\n    </div>\n    <h2 {...{\n      \"id\": \"scala-an-entirely-rational-and-very-consistent-language\"\n    }}>{`Scala: an entirely rational and very consistent language`}</h2>\n    <p>{`First off, we can see that our `}<inlineCode parentName=\"p\">{`Entrypoint`}</inlineCode>{` is an `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` (not a class, because we need something which is a singleton to launch the `}<inlineCode parentName=\"p\">{`App`}</inlineCode>{`). It extends `}<inlineCode parentName=\"p\">{`LazyLogging`}</inlineCode>{` which is why we can call methods of `}<inlineCode parentName=\"p\">{`logger`}</inlineCode>{` without declaring it. Go research these terms if you aren’t familiar with them. Formalities dealt with, we’re then loading some configs via `}<inlineCode parentName=\"p\">{`val config = ConfigFactory.load()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\",\n        \"data-language\": \"scala\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">object</span> Entrypoint <span class=\\\"token keyword\\\">extends</span> App <span class=\\\"token keyword\\\">with</span> LazyLogging <span class=\\\"token punctuation\\\">{</span>\\n  logger<span class=\\\"token punctuation\\\">.</span>info<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Initialising Data engineering Part III demo app...\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">val</span> config <span class=\\\"token operator\\\">=</span> ConfigFactory<span class=\\\"token punctuation\\\">.</span>load<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">val</span> producer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> ToyProducer<span class=\\\"token punctuation\\\">(</span>\\n    config<span class=\\\"token punctuation\\\">.</span>getString<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"kafka-brokers\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    config<span class=\\\"token punctuation\\\">.</span>getString<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"output-topic\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">val</span> sendresult <span class=\\\"token operator\\\">=</span> producer<span class=\\\"token punctuation\\\">.</span>sendmessage<span class=\\\"token punctuation\\\">(</span>config<span class=\\\"token punctuation\\\">.</span>getString<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"output-message\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  logger<span class=\\\"token punctuation\\\">.</span>info<span class=\\\"token punctuation\\\">(</span>sendresult<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">)</span>\\n  Thread<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3600000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`While config wrangling is not exciting ML functionality, one of the things I realised early when working with Scala was that compilation via SBT is agonisingly slow. `}<strong parentName=\"p\">{`To avoid spending half our lives waiting for the build cycle to complete and the container to deploy (which is even slower in cloud development environments, especially for larger containers) it helps to have a config file where you can change settings quickly.`}</strong></p>\n    <p><em parentName=\"p\">{`Note that agonisingly slow means 45–120 seconds (if it is taking longer for a project like this you’re doing something wrong). This is agonising if you’re making a bunch of changes in quick succession, don’t know the language well, and want to test after each change. That would be at least 10–20 recompiles per hour, which if you multiply it out comes out to you having spend something like a quarter of your hour waiting for recompilation.`}</em></p>\n    <p>{`We instantiate a ToyProducer class and pass some of the configs - we could pass the whole config, but that would diminish the modularity of the code.`}</p>\n    <p>{`Diving into what this ToyProducer class actually does, we’ll see that it instantiates a Java `}<inlineCode parentName=\"p\">{`Properties`}</inlineCode>{` object to receive our configs, which tips us off that this may be a Java object being accessed from Scala. When we have to do this we basically lose a lot of the elegance of Scala, so the “Scala can access the Java ecosystem” argument actually isn’t a great one (unless you enjoy spending your life writing extremely awkward interfaces to loosely supported languages).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\",\n        \"data-language\": \"scala\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">class</span> ToyProducer<span class=\\\"token punctuation\\\">(</span>bootstrapServers<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">,</span> topic<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">val</span> props <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> Properties\\n  props<span class=\\\"token punctuation\\\">.</span>put<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bootstrap.servers\\\"</span><span class=\\\"token punctuation\\\">,</span> bootstrapServers<span class=\\\"token punctuation\\\">)</span>\\n  props<span class=\\\"token punctuation\\\">.</span>put<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"key.serializer\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"org.apache.kafka.common.serialization.StringSerializer\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  props<span class=\\\"token punctuation\\\">.</span>put<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"value.serializer\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"org.apache.kafka.common.serialization.StringSerializer\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">val</span> client <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> KafkaProducer<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">def</span> sendmessage<span class=\\\"token punctuation\\\">(</span>message<span class=\\\"token operator\\\">:</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> RecordMetadata<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> res <span class=\\\"token operator\\\">=</span> client<span class=\\\"token punctuation\\\">.</span>send<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> ProducerRecord<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span>topic<span class=\\\"token operator\\\">=</span>topic<span class=\\\"token punctuation\\\">,</span>K<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"No key here...\\\"</span><span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">=</span>message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    res<span class=\\\"token punctuation\\\">.</span>get<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`Once we’ve gotten over the nauseating getty/settyness of the interface, the clunkiness becomes particularly clear on line 13 - try to run deploy.sh in the deploy folder… Yes, you receive an error helpfully telling you that there is something wrong with your method signature. This is because Java methods (even if called from Scala) can’t take named parameters. Remove the parameter names and try again…`}</p>\n    <h3 {...{\n      \"id\": \"how-can-you-log-that-the-logging-is-broken-if-the-logging-is-broken-so-you-cant-log-that\"\n    }}>{`How can you log that the logging is broken if the logging is broken so you can’t log that…`}</h3>\n    <p>{`OK, it now builds and deploys, jump into your kubernetes dashboard (`}<inlineCode parentName=\"p\">{`minikube dashboard`}</inlineCode>{` in your console will do it - please read the previous posts…), select your dev namespace and go to overview; you should see your replica set running there. But sadly the container has failed… So much for Scala catching most errors at compilation time…`}</p>\n    <p>{`Why did it fail? Who knows, your logging is broken - at least you can claim that 'we are not aware of any issues’.`}</p>\n    <p>{`The logging framework scans your classpath for logging implementations to bind to, and you have one in both `}<inlineCode parentName=\"p\">{`logback-classic`}</inlineCode>{`, as well as the helpfully named `}<inlineCode parentName=\"p\">{`SLF4J-Log4J`}</inlineCode>{`, which has been imported as a transitive dependancy (a dependancy contained in a library you are importing). Honestly, where did you even learn to Scala, you must have had a hopeless teacher.`}</p>\n    <p>{`To fix this, we need to go back to our SBT file and seperate the `}<inlineCode parentName=\"p\">{`Seq`}</inlineCode>{` containing our library dependancies into two, one of which explicitly excludes the SLF4J organisation -`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\",\n        \"data-language\": \"scala\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"libraryDependencies <span class=\\\"token operator\\\">++</span><span class=\\\"token operator\\\">=</span> Seq<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token string\\\">\\\"org.apache.kafka\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"kafka-streams-scala\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"2.2.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"io.confluent\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"kafka-avro-serializer\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"3.1.2\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"org.apache.kafka\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"kafka_2.9.2\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"0.8.2.2\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"com.typesafe.scala-logging\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"scala-logging\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"3.9.2\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"com.typesafe\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"config\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"1.3.4\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"ch.qos.logback\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"logback-classic\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"1.0.13\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`becomes -`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\",\n        \"data-language\": \"scala\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"libraryDependencies <span class=\\\"token operator\\\">++</span><span class=\\\"token operator\\\">=</span> Seq<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token string\\\">\\\"org.apache.kafka\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"kafka-streams-scala\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"2.2.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"io.confluent\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"kafka-avro-serializer\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"3.1.2\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"org.apache.kafka\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"kafka_2.9.2\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"0.8.2.2\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"com.typesafe.scala-logging\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"scala-logging\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"3.9.2\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"com.typesafe\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"config\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"1.3.4\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">.</span>exclude<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"org.slf4j\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"slf4j-log4j12\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\nlibraryDependencies <span class=\\\"token operator\\\">++</span><span class=\\\"token operator\\\">=</span> Seq<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ch.qos.logback\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"logback-classic\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"1.0.13\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`The meaning should be clear to anyone who understands `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{`ping an array in any language. We apply the same operation (`}<inlineCode parentName=\"p\">{`exclude`}</inlineCode>{`) to every element (`}<inlineCode parentName=\"p\">{`_`}</inlineCode>{` in Scala, which allows us to anonymously refer to the elements being mapped, sadists, and those of us who prefer clarity at the expense of brevity might prefer the verbosity of `}<inlineCode parentName=\"p\">{`x=>x.exclude(...)`}</inlineCode>{`). We then add `}<inlineCode parentName=\"p\">{`logback-classic`}</inlineCode>{` back in without the exclusion.`}</p>\n    <h3 {...{\n      \"id\": \"wheres-kafka-running-again\"\n    }}>{`Where’s Kafka running again?`}</h3>\n    <p>{`Redeploy again and check the logs…`}</p>\n    <p>{`Oh no… Network errors from Kafka - that doesn’t look too healthy. If we look closely we can see that it is failing to talk to localhost - but hang on, that doesn’t seem quite right… In production, the applications talking to Kafka shouldn’t be on the same machine as Kafka itself - our dev environment has been set up to replicate this hasn’t it? So change the application.conf to talk to our Kubernetes Kafka service at `}<inlineCode parentName=\"p\">{`kafka-service.dev`}</inlineCode>{` instead of localhost.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-conf\",\n        \"data-language\": \"conf\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"app-name=&quot;data-engineering-blog&quot;\\nkafka-brokers=&quot;kafka-service.dev:9092&quot;\\nschema-registry=&quot;kafka-service.dev:8081&quot;\\noutput-topic=&quot;coyote-test-avro&quot;\\noutput-message=&quot;I&#39;m a message!!&quot;\\n\"\n        }\n      }}></code></pre>\n    <p>{`Redeploy, check the logs - all looks pretty healthy… And if you use the `}<inlineCode parentName=\"p\">{`kubectl port-forward --namespace=dev service/kafka-service 3030:3030`}</inlineCode>{` command then head across to `}<inlineCode parentName=\"p\">{`localhost:3030`}</inlineCode>{` to access the Landoop UI, you’ll see there are some messages in your Kafka topic.`}</p>\n    <figure styles={{\n      minWidth: \"100%\"\n    }}>\n  <img src={apprunning} className={styles[\"image\"]} alt=\"Application running in Kubernetes\" />\n  <figcaption>It works, I took a screenshot to prove it.</figcaption>\n    </figure>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"design-choices\",\n    level: 3,\n    title: \"Design Choices\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"retention\",\n    level: 3,\n    title: \"Retention\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"managing-dev-and-production-configs\",\n    level: 3,\n    title: \"Managing dev and production configs\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"producing-messages-to-kafka-from-scala\",\n    level: 2,\n    title: \"Producing messages to Kafka from Scala\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"one-click-deploy---wow\",\n    level: 2,\n    title: \"One click deploy - Wow.\",\n    children: [\n        {\n              id: \"wheres-my-code-five-levels-deep\",\n              level: 3,\n              title: \"Where’s my code? Five levels deep.\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"scala-an-entirely-rational-and-very-consistent-language\",\n    level: 2,\n    title: \"Scala: an entirely rational and very consistent language\",\n    children: [\n        {\n              id: \"how-can-you-log-that-the-logging-is-broken-if-the-logging-is-broken-so-you-cant-log-that\",\n              level: 3,\n              title: \"How can you log that the logging is broken if the logging is broken so you can’t log that…\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"wheres-kafka-running-again\",\n              level: 3,\n              title: \"Where’s Kafka running again?\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"document_image__rZXyh\",\"figure\":\"document_figure__gWI8Z\",\"figureright\":\"document_figureright__hCBOD\",\"figureleft\":\"document_figureleft__1kQb0\",\"sidebarcontainer\":\"document_sidebarcontainer__3KzLz\",\"sidebar\":\"document_sidebar__363Ye\"};","module.exports = __webpack_public_path__ + \"static/media/Post 3 - Application running.dd368ed9.png\";","module.exports = __webpack_public_path__ + \"static/media/stern.5f3e1298.gif\";","module.exports = __webpack_public_path__ + \"static/media/inception.5580458b.gif\";"],"sourceRoot":""}