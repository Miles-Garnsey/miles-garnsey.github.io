{"version":3,"sources":["routes/posts/2023-02-23-Making Go functions generic II/post.js"],"names":["__webpack_require__","r","__webpack_exports__","title","tags","spoiler","getContent","e","then","bind","author"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAeA,EAAA,SACbC,MAAK,2GACLC,KAAM,CACJ,aACA,SACA,WACA,cACA,aACA,iBACA,uBACA,sBAEFC,QAAS,uLACTC,WAAY,kBAAMN,EAAAO,EAAA,GAAAC,KAAAR,EAAAS,KAAA,WAClBC,OAAQ","file":"static/js/20.9133827c.chunk.js","sourcesContent":["export default {\n  title: `Golang, generics and Kubernetes operator tooling II. Generic interfaces and new() won't save you either.`,\n  tags: [\n    \"Kubernetes\", \n    \"golang\", \n    \"generics\", \n    \"kubebuilder\", \n    \"interfaces\", \n    \"controller-gen\", \n    \"Kubernetes operators\", \n    \"k8ssandra-operator\"\n],\n  spoiler: \"Part II of of a series on golang generics and their applications in Kubernetes operator development. We will discuss the use of generics within interfaces, and embedded interfaces.\",\n  getContent: () => import('./document.mdx'),\n  author: \"Miles Garnsey\",\n}\n"],"sourceRoot":""}