(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{55:function(e,t,a){"use strict";a.r(t),a.d(t,"readingTime",function(){return c}),a.d(t,"default",function(){return u}),a.d(t,"tableOfContents",function(){return b}),a.d(t,"frontMatter",function(){return p});var n=a(16),i=(a(0),a(22)),o=a(56),s=a.n(o),r=a(57),l=a.n(r),c={text:"10 min read",minutes:9.28,time:556800,words:1856},h={},d="wrapper";function u(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)(d,Object.assign({},h,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"a-blog-series-on-data-science-and-engineering"},"A blog series on data science and engineering"),Object(i.b)("p",null,"Maybe you heard it was the sexiest discipline of the 21st century? I tried to warn you, but the introductory post didn\u2019t scare you off?"),Object(i.b)("p",null,"Welcome to the first post in a series on data engineering, data science, and how to make these things actually work. We won\u2019t be writing any code in this edition, we\u2019ll just be outlining the structure of what we\u2019re going to build over the next few posts, and why. We\u2019ll start by talking about this idea of a 'platform\u2019, and what that might entail, then we\u2019ll outline what components we might want on our platform."),Object(i.b)("p",null,"We\u2019ll then code it up (using Scala, Python, JS, whatever comes to hand really) over the following posts. I won\u2019t expect familiarity with the nuances of every language, that\u2019s part of the learning experience I\u2019m aiming for. If I haven\u2019t covered something sufficiently, get me on ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/MilesGarnsey/"}),"Twitter")," and let me know."),Object(i.b)("p",null,"Now, most blogs like this would start off by telling you to download Python, install Jupyter\u2026 then we\u2019d go through a variety of motions, culminating in ",Object(i.b)("strong",{parentName:"p"},"the building of a decision tree in scikit-learn, at which point your salary would increase two-fold, your beard would become thick and lustrous (ladies, this applies to you too), and you would develop a passion for obscure areas of mathematics.")," Here, have some ",Object(i.b)("span",{className:s.a.rainbow},Object(i.b)("strong",{parentName:"p"},"wow")),"."),Object(i.b)("figure",{className:s.a.figure},Object(i.b)("img",{src:l.a,className:s.a.image,alt:"A man with a detachable beard."}),Object(i.b)("figcaption",null,"Knowledge transfer in data science.")),Object(i.b)("h2",{id:"sorry"},"Sorry\u2026"),Object(i.b)("p",null,"I\u2019m looking to do things a bit more rigorously here, this blog is about doing data science and engineering in the real world, and how to solve the issues that arise. If you obtain the advantage of a beard from reading this blog, it will simply be because you haven\u2019t left your home or showered in a week while you try to debug some mistake I inadvertently included. While I\u2019m sure that you want to hear about the latest Tensorflow model (probably so you can go and use the pre-trained version amirite? \ud83d\ude0f) there are good reasons to talk about the platform first."),Object(i.b)("p",null,"It often comes about that we build a platform without realising it. Most of the code we write in relation to a data science project actually has nothing to do with the specific task at hand."),Object(i.b)("h2",{id:"an-example-application"},"An example application"),Object(i.b)("p",null,"For an initial example, let\u2019s think about building a system which stores Tweets, while making them available (via an API) to other applications. This is the first bit of functionality we\u2019ll build as a part of this series."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"You: goes and downloads the Twitter app from the app store and shuts the browser tab.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Hang on\u2026")," My domain is data science and engineering (unsubstantiated rumours suggest I write a blog about it), so let\u2019s add three NFRs to ensure I can contribute something at least slightly novel. Let\u2019s demand that the system be scalable, near real time (which I think is kind of implicit by talking about a real time source anyway, but some may disagree), and offer high availability."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"So our above requirement sounds simple, but there are a few things that should tip us off to the fact that it isn\u2019t. "),"Firstly, we\u2019ve outlined a need for horizontal scalability. That means that we need to be able to add and remove instances of the application without interruption of service. Secondly, we\u2019ve outlined HA as a requirement - this means we always need sufficient instances to serve requests, and in turn monitoring, triggers and autoscaling to figure out how many instances that is. Finally, we\u2019ve asked for storage, which neccesitates a measure of persistence. In other words, whatever we implement needs to be a horizontally autoscaling highly available distributed system - not straightforward, no matter how good you are at installing Pandas and Numpy."),Object(i.b)("h2",{id:"the-need-for-a-platform"},"The need for a platform"),Object(i.b)("p",null,"The platform is going to basically give us two things, a generic data plane and a generic control plane, and will include -"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"A ",Object(i.b)("strong",{parentName:"li"},"Kafka cluster + Schema registry")," to enable scaling and durability of data written, manage all persistent storage concerns, as well as enable rapid failovers."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Etcd")," to do configuration management."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Kubernetes")," to do general cluster things and manage scaling."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Fluentd")," for monitoring.")),Object(i.b)("div",{className:s.a.sidebarcontainer},Object(i.b)("p",null,"Why are we doing it this way? Luckily, thanks to the joys of ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/jamesknelson/create-react-blog"}),"MDX and React.JS"),", this blog has sidebars to deal with long and slightly sarcastic digressions on matters such as this. ",Object(i.b)("span",{className:s.a.rainbow},Object(i.b)("strong",{parentName:"p"},"wow")),"."),Object(i.b)("span",{className:s.a.sidebar},Object(i.b)("h2",null," Why are we doing it this way?"),Object(i.b)("p",null,"  Rather than going into specifics on each component\u2019s purpose, I could say that we\u2019re implementing a Kappa Architecture via microservices. Because you\u2019re a learned reader - or maybe just because you have access to Google on your phone - you\u2019d probably understand that whatever we\u2019re building thus addresses the requirements around scalability, availability, near-real-timeness and storage. Whether or not you understood these things and why they work, you\u2019d probably ask no further questions - because I intoned the name of an ancient Greek letter."),Object(i.b)("p",null,"  But this blog isn\u2019t about selling you a bridge, so there are a variety of reasons why I didn\u2019t just say ",Object(i.b)("em",{parentName:"p"},"mumble mumble, Kappa Architecture, stakeholder value\u2026 enhanced\u2026 mumble"),"; the key one being that I probably have one version of a a Kappa Architecture Via Microservices in my head, and you have a different version in yours."),Object(i.b)("p",null,"  The issue with all of these \u201carchitectures\u201d is that they don\u2019t cover a sufficient set of application functionality to warrant the term - I\u2019d think of them as design patterns. Having done the data science/engineering/big data/whatever thing for a while now, I\u2019ve developed the (probably less than novel) opinion that basically there are only four things in the application world - data storage, messaging/APIs, human factors (which is everything from the front-end through to enterprise culture, the project manager, the business analyst, or the project\u2019s stakeholders), and computation. They all need to be covered for something to call itself an architecture, in my view. e.g. a microservices pattern probably says that our microservices application code runs in a docker container, but relatively little about what happens when it needs to communicate. One default assumption is that  this will happen via REST, but it isn\u2019t an essential feature, and isn\u2019t always a best practice."),Object(i.b)("p",null,"  Sometimes spending the additional verbiage on a real explanation of a design can save a tonne of effort down the track.")),Object(i.b)("p",null,"So that\u2019s the platform. As for the app? That\u2019s almost the easy part - we\u2019ll use various Kafka libraries and ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/DanielaSfregola/twitter4s"}),"twitter4s"),". There are a few others we\u2019ll consider, but they very much sit on the utility side of things."),Object(i.b)("h2",{id:"the-data-plane---about-kafka"},"The Data Plane - about Kafka"),Object(i.b)("p",null,"Our data plane will rely mostly on ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://kafka.apache.org/"}),"Kafka"),", which often advertises itself as some sort of data hub type product, almost as an alternative to a database, data lake, or (at the other end) an ESB or messaging system. It can probably hit those requirements, but they aren\u2019t really where the value lies. The easiest way to explain Kafka is to say that ",Object(i.b)("strong",{parentName:"p"},"it offers an integrated data plane for distributed applications and allows them to persist, manage and share state.")," If another application wants to inspect that state, Kafka enables this - we can set the retention policies on the data for our use case and then write SQL against the data or interact with it in other ways. If we need bidirectional communication between the two applications, this is also covered, and we can set things up so that communication failures and temporary service unavailabilities on either side are recoverable."),Object(i.b)("p",null,"Kafka offers guarantees around data consistency, durability, and availability and allows us to scale and monitor applications almost infinitely and 'for free\u2019, in terms of the engineering effort required to add such features. ",Object(i.b)("em",{parentName:"p"},"NB; As with all things in the enterprise, in practice Kafka is often misconfigured and won\u2019t provide any of these benefits.")),Object(i.b)("p",null,"In case it isn\u2019t clear, being able to offload the concerns I\u2019ve just mentioned is A Big Deal. Figuring out how to distribute messaging and storage is time consuming from an engineering perspective, adds zero perceived value to the user experience and enables zero functional requirements."),Object(i.b)("h3",{id:"but-you-have-to-do-it-because-a-404-message-doesnt-hit-anyones-requirements"},"But you have to do it, because a 404 message doesn\u2019t hit anyone\u2019s requirements."),Object(i.b)("p",null,"Moreover, the other two parts of the application (human factors and computation) don\u2019t cost the same engineering effort. Hosting front ends in a scalable fashion is basically a solved problem (I mean, the internet works, right?), and if you were looking for advice on how to achieve consistency, durability and availability from the rest of your human factors elements - collectively, wetware, or non-silicon-based-considerations - I suggest an organisational psychology blog might be more your speed, although I\u2019ve personally given up on this. Conversely, computation is arguably so hard that even psychologists aren\u2019t arrogant enough to think they can solve it (or they have yet to hear about the problem, it\u2019s hard to say), so there\u2019s no point in making it a part of the platform.")),Object(i.b)("h2",{id:"how-else-could-we-hit-the-same-requirements"},"How else could we hit the same requirements?"),Object(i.b)("p",null,"It is instructive to consider some of the ways that the architecture we\u2019re presenting here differs from our other options. For example, distributed applications, (especially service mesh designs) will often use RESTful APIs to communicate between components. The issue is, that if a RESTful transaction fails, it isn\u2019t clear how to proceed to avoid data loss. We might make it the sender\u2019s responsibility and retry, but then we\u2019ll need to consider implementing circuit breaker patterns - this becomes complicated quickly. If we use Kafka as a messaging solution, we make it the receiver\u2019s responsibility and simply set a retention policy that will cover our maximum expected outage time."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"REST specialises in synchronous unicast communication patterns, Kafka enables asynchronous multicast communication patterns.")),Object(i.b)("p",null,"It is nice to have all of our data management in a single place, rather than having different systems to manage transmission and storage. This allows us to centralise monitoring and configuration, from permissions, metrics on reads and writes, latency and throughput, durability via replication factors, distribution via the number of partitions of the data and retention via cleanup policies and retention times. The alternative is often to configure these individually per-application."),Object(i.b)("p",null,"Throw all your components in docker containers, deploy via Kubernetes and you\u2019ve probably delivered something they\u2019ll call a",Object(i.b)("strong",{parentName:"p"}," Kappa Architecture deployed as microservices"),", but I\u2019m also happy to call it a service mesh on a persistent substrate; or otherwise, as directed by marketing."),Object(i.b)("p",null,"The genericity of the solution is great because, to me, storage and messaging are the two most boring parts of an application. I\u2019d much rather just implement a single messaging and storage substrate and focus on the interesting parts like the human factors (how do people use it) and the computation (what does it think it does). Naturally, this led me to develop skills in Kafka and, due to the exigencies of capitalism, I now spend quite a lot of time working on storage and APIs."))}u.isMDXComponent=!0;var b=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return[{id:"a-blog-series-on-data-science-and-engineering",level:2,title:"A blog series on data science and engineering",children:[]},{id:"sorry",level:2,title:"Sorry\u2026",children:[]},{id:"an-example-application",level:2,title:"An example application",children:[]},{id:"the-need-for-a-platform",level:2,title:"The need for a platform",children:[]},{id:"the-data-plane---about-kafka",level:2,title:"The Data Plane - about Kafka",children:[{id:"but-you-have-to-do-it-because-a-404-message-doesnt-hit-anyones-requirements",level:3,title:"But you have to do it, because a 404 message doesn\u2019t hit anyone\u2019s requirements.",children:[]}]},{id:"how-else-could-we-hit-the-same-requirements",level:2,title:"How else could we hit the same requirements?",children:[]}]},p={}},56:function(e,t,a){e.exports={image:"document_image__3-wOd",figure:"document_figure__1UT6w",figureright:"document_figureright__2zW8o",figureleft:"document_figureleft__37BAe",sidebarcontainer:"document_sidebarcontainer__1afjl",sidebar:"document_sidebar__3NMxd"}},57:function(e,t,a){e.exports=a.p+"static/media/beard.04aaeab6.gif"}}]);
//# sourceMappingURL=11.02525585.chunk.js.map