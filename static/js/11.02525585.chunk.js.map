{"version":3,"sources":["routes/posts/2019-08-19-Data Engineering Pt 1/document.mdx","routes/posts/2019-08-19-Data Engineering Pt 1/document.module.css","routes/posts/2019-08-19-Data Engineering Pt 1/beard.gif"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_user_Documents_projects_blog_client_react_blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","styles","src","beard","alt","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter","module","exports","image","figure","figureright","figureleft","sidebarcontainer","sidebar","__webpack_require__","p"],"mappings":"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","file":"static/js/11.02525585.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"10 min read\",\"minutes\":9.28,\"time\":556800,\"words\":1856}\n/* @jsx mdx */\nimport styles from './document.module.css'\nimport beard from './beard.gif'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"a-blog-series-on-data-science-and-engineering\"\n    }}>{`A blog series on data science and engineering`}</h2>\n    <p>{`Maybe you heard it was the sexiest discipline of the 21st century? I tried to warn you, but the introductory post didn‚Äôt scare you off?`}</p>\n    <p>{`Welcome to the first post in a series on data engineering, data science, and how to make these things actually work. We won‚Äôt be writing any code in this edition, we‚Äôll just be outlining the structure of what we‚Äôre going to build over the next few posts, and why. We‚Äôll start by talking about this idea of a 'platform‚Äô, and what that might entail, then we‚Äôll outline what components we might want on our platform.`}</p>\n    <p>{`We‚Äôll then code it up (using Scala, Python, JS, whatever comes to hand really) over the following posts. I won‚Äôt expect familiarity with the nuances of every language, that‚Äôs part of the learning experience I‚Äôm aiming for. If I haven‚Äôt covered something sufficiently, get me on `}<a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/MilesGarnsey/\"\n      }}>{`Twitter`}</a>{` and let me know.`}</p>\n    <p>{`Now, most blogs like this would start off by telling you to download Python, install Jupyter‚Ä¶ then we‚Äôd go through a variety of motions, culminating in `}<strong parentName=\"p\">{`the building of a decision tree in scikit-learn, at which point your salary would increase two-fold, your beard would become thick and lustrous (ladies, this applies to you too), and you would develop a passion for obscure areas of mathematics.`}</strong>{` Here, have some `}<span className={styles[\"rainbow\"]}><strong parentName=\"p\">{`wow`}</strong></span>{`.`}</p>\n    <figure className={styles[\"figure\"]}>\n  <img src={beard} className={styles[\"image\"]} alt=\"A man with a detachable beard.\" />\n  <figcaption>Knowledge transfer in data science.</figcaption>\n    </figure>\n    <h2 {...{\n      \"id\": \"sorry\"\n    }}>{`Sorry‚Ä¶`}</h2>\n    <p>{`I‚Äôm looking to do things a bit more rigorously here, this blog is about doing data science and engineering in the real world, and how to solve the issues that arise. If you obtain the advantage of a beard from reading this blog, it will simply be because you haven‚Äôt left your home or showered in a week while you try to debug some mistake I inadvertently included. While I‚Äôm sure that you want to hear about the latest Tensorflow model (probably so you can go and use the pre-trained version amirite? üòè) there are good reasons to talk about the platform first.`}</p>\n    <p>{`It often comes about that we build a platform without realising it. Most of the code we write in relation to a data science project actually has nothing to do with the specific task at hand.`}</p>\n    <h2 {...{\n      \"id\": \"an-example-application\"\n    }}>{`An example application`}</h2>\n    <p>{`For an initial example, let‚Äôs think about building a system which stores Tweets, while making them available (via an API) to other applications. This is the first bit of functionality we‚Äôll build as a part of this series.`}</p>\n    <p><em parentName=\"p\">{`You: goes and downloads the Twitter app from the app store and shuts the browser tab.`}</em></p>\n    <p><strong parentName=\"p\">{`Hang on‚Ä¶`}</strong>{` My domain is data science and engineering (unsubstantiated rumours suggest I write a blog about it), so let‚Äôs add three NFRs to ensure I can contribute something at least slightly novel. Let‚Äôs demand that the system be scalable, near real time (which I think is kind of implicit by talking about a real time source anyway, but some may disagree), and offer high availability.`}</p>\n    <p><strong parentName=\"p\">{`So our above requirement sounds simple, but there are a few things that should tip us off to the fact that it isn‚Äôt. `}</strong>{`Firstly, we‚Äôve outlined a need for horizontal scalability. That means that we need to be able to add and remove instances of the application without interruption of service. Secondly, we‚Äôve outlined HA as a requirement - this means we always need sufficient instances to serve requests, and in turn monitoring, triggers and autoscaling to figure out how many instances that is. Finally, we‚Äôve asked for storage, which neccesitates a measure of persistence. In other words, whatever we implement needs to be a horizontally autoscaling highly available distributed system - not straightforward, no matter how good you are at installing Pandas and Numpy.`}</p>\n    <h2 {...{\n      \"id\": \"the-need-for-a-platform\"\n    }}>{`The need for a platform`}</h2>\n    <p>{`The platform is going to basically give us two things, a generic data plane and a generic control plane, and will include -`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A `}<strong parentName=\"li\">{`Kafka cluster + Schema registry`}</strong>{` to enable scaling and durability of data written, manage all persistent storage concerns, as well as enable rapid failovers.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Etcd`}</strong>{` to do configuration management.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Kubernetes`}</strong>{` to do general cluster things and manage scaling.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Fluentd`}</strong>{` for monitoring.`}</li>\n    </ol>\n    <div className={styles[\"sidebarcontainer\"]}>\n      <p>{`Why are we doing it this way? Luckily, thanks to the joys of `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/jamesknelson/create-react-blog\"\n        }}>{`MDX and React.JS`}</a>{`, this blog has sidebars to deal with long and slightly sarcastic digressions on matters such as this. `}<span className={styles[\"rainbow\"]}><strong parentName=\"p\">{`wow`}</strong></span>{`.`}</p>\n      <span className={styles[\"sidebar\"]}>\n  <h2> Why are we doing it this way?</h2>\n        <p>{`  Rather than going into specifics on each component‚Äôs purpose, I could say that we‚Äôre implementing a Kappa Architecture via microservices. Because you‚Äôre a learned reader - or maybe just because you have access to Google on your phone - you‚Äôd probably understand that whatever we‚Äôre building thus addresses the requirements around scalability, availability, near-real-timeness and storage. Whether or not you understood these things and why they work, you‚Äôd probably ask no further questions - because I intoned the name of an ancient Greek letter.`}</p>\n        <p>{`  But this blog isn‚Äôt about selling you a bridge, so there are a variety of reasons why I didn‚Äôt just say `}<em parentName=\"p\">{`mumble mumble, Kappa Architecture, stakeholder value‚Ä¶ enhanced‚Ä¶ mumble`}</em>{`; the key one being that I probably have one version of a a Kappa Architecture Via Microservices in my head, and you have a different version in yours.`}</p>\n        <p>{`  The issue with all of these ‚Äúarchitectures‚Äù is that they don‚Äôt cover a sufficient set of application functionality to warrant the term - I‚Äôd think of them as design patterns. Having done the data science/engineering/big data/whatever thing for a while now, I‚Äôve developed the (probably less than novel) opinion that basically there are only four things in the application world - data storage, messaging/APIs, human factors (which is everything from the front-end through to enterprise culture, the project manager, the business analyst, or the project‚Äôs stakeholders), and computation. They all need to be covered for something to call itself an architecture, in my view. e.g. a microservices pattern probably says that our microservices application code runs in a docker container, but relatively little about what happens when it needs to communicate. One default assumption is that  this will happen via REST, but it isn‚Äôt an essential feature, and isn‚Äôt always a best practice.`}</p>\n        <p>{`  Sometimes spending the additional verbiage on a real explanation of a design can save a tonne of effort down the track.`}</p>\n      </span>\n      <p>{`So that‚Äôs the platform. As for the app? That‚Äôs almost the easy part - we‚Äôll use various Kafka libraries and `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/DanielaSfregola/twitter4s\"\n        }}>{`twitter4s`}</a>{`. There are a few others we‚Äôll consider, but they very much sit on the utility side of things.`}</p>\n      <h2 {...{\n        \"id\": \"the-data-plane---about-kafka\"\n      }}>{`The Data Plane - about Kafka`}</h2>\n      <p>{`Our data plane will rely mostly on `}<a parentName=\"p\" {...{\n          \"href\": \"https://kafka.apache.org/\"\n        }}>{`Kafka`}</a>{`, which often advertises itself as some sort of data hub type product, almost as an alternative to a database, data lake, or (at the other end) an ESB or messaging system. It can probably hit those requirements, but they aren‚Äôt really where the value lies. The easiest way to explain Kafka is to say that `}<strong parentName=\"p\">{`it offers an integrated data plane for distributed applications and allows them to persist, manage and share state.`}</strong>{` If another application wants to inspect that state, Kafka enables this - we can set the retention policies on the data for our use case and then write SQL against the data or interact with it in other ways. If we need bidirectional communication between the two applications, this is also covered, and we can set things up so that communication failures and temporary service unavailabilities on either side are recoverable.`}</p>\n      <p>{`Kafka offers guarantees around data consistency, durability, and availability and allows us to scale and monitor applications almost infinitely and 'for free‚Äô, in terms of the engineering effort required to add such features. `}<em parentName=\"p\">{`NB; As with all things in the enterprise, in practice Kafka is often misconfigured and won‚Äôt provide any of these benefits.`}</em></p>\n      <p>{`In case it isn‚Äôt clear, being able to offload the concerns I‚Äôve just mentioned is A Big Deal. Figuring out how to distribute messaging and storage is time consuming from an engineering perspective, adds zero perceived value to the user experience and enables zero functional requirements.`}</p>\n      <h3 {...{\n        \"id\": \"but-you-have-to-do-it-because-a-404-message-doesnt-hit-anyones-requirements\"\n      }}>{`But you have to do it, because a 404 message doesn‚Äôt hit anyone‚Äôs requirements.`}</h3>\n      <p>{`Moreover, the other two parts of the application (human factors and computation) don‚Äôt cost the same engineering effort. Hosting front ends in a scalable fashion is basically a solved problem (I mean, the internet works, right?), and if you were looking for advice on how to achieve consistency, durability and availability from the rest of your human factors elements - collectively, wetware, or non-silicon-based-considerations - I suggest an organisational psychology blog might be more your speed, although I‚Äôve personally given up on this. Conversely, computation is arguably so hard that even psychologists aren‚Äôt arrogant enough to think they can solve it (or they have yet to hear about the problem, it‚Äôs hard to say), so there‚Äôs no point in making it a part of the platform.`}</p>\n    </div>\n    <h2 {...{\n      \"id\": \"how-else-could-we-hit-the-same-requirements\"\n    }}>{`How else could we hit the same requirements?`}</h2>\n    <p>{`It is instructive to consider some of the ways that the architecture we‚Äôre presenting here differs from our other options. For example, distributed applications, (especially service mesh designs) will often use RESTful APIs to communicate between components. The issue is, that if a RESTful transaction fails, it isn‚Äôt clear how to proceed to avoid data loss. We might make it the sender‚Äôs responsibility and retry, but then we‚Äôll need to consider implementing circuit breaker patterns - this becomes complicated quickly. If we use Kafka as a messaging solution, we make it the receiver‚Äôs responsibility and simply set a retention policy that will cover our maximum expected outage time.`}</p>\n    <p><strong parentName=\"p\">{`REST specialises in synchronous unicast communication patterns, Kafka enables asynchronous multicast communication patterns.`}</strong></p>\n    <p>{`It is nice to have all of our data management in a single place, rather than having different systems to manage transmission and storage. This allows us to centralise monitoring and configuration, from permissions, metrics on reads and writes, latency and throughput, durability via replication factors, distribution via the number of partitions of the data and retention via cleanup policies and retention times. The alternative is often to configure these individually per-application.`}</p>\n    <p>{`Throw all your components in docker containers, deploy via Kubernetes and you‚Äôve probably delivered something they‚Äôll call a`}<strong parentName=\"p\">{` Kappa Architecture deployed as microservices`}</strong>{`, but I‚Äôm also happy to call it a service mesh on a persistent substrate; or otherwise, as directed by marketing.`}</p>\n    <p>{`The genericity of the solution is great because, to me, storage and messaging are the two most boring parts of an application. I‚Äôd much rather just implement a single messaging and storage substrate and focus on the interesting parts like the human factors (how do people use it) and the computation (what does it think it does). Naturally, this led me to develop skills in Kafka and, due to the exigencies of capitalism, I now spend quite a lot of time working on storage and APIs.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"a-blog-series-on-data-science-and-engineering\",\n    level: 2,\n    title: \"A blog series on data science and engineering\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"sorry\",\n    level: 2,\n    title: \"Sorry‚Ä¶\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"an-example-application\",\n    level: 2,\n    title: \"An example application\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"the-need-for-a-platform\",\n    level: 2,\n    title: \"The need for a platform\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"the-data-plane---about-kafka\",\n    level: 2,\n    title: \"The Data Plane - about Kafka\",\n    children: [\n        {\n              id: \"but-you-have-to-do-it-because-a-404-message-doesnt-hit-anyones-requirements\",\n              level: 3,\n              title: \"But you have to do it, because a 404 message doesn‚Äôt hit anyone‚Äôs requirements.\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"how-else-could-we-hit-the-same-requirements\",\n    level: 2,\n    title: \"How else could we hit the same requirements?\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"document_image__3-wOd\",\"figure\":\"document_figure__1UT6w\",\"figureright\":\"document_figureright__2zW8o\",\"figureleft\":\"document_figureleft__37BAe\",\"sidebarcontainer\":\"document_sidebarcontainer__1afjl\",\"sidebar\":\"document_sidebar__3NMxd\"};","module.exports = __webpack_public_path__ + \"static/media/beard.04aaeab6.gif\";"],"sourceRoot":""}